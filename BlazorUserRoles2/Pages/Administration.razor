@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>User Name</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var user in ColUsers)
                    {
                        <tr>
                            <td>@user.Id.Substring(0,5) ...</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                <!-- Edit the current forecash -->
                                <button class="btn btn-primary" @onclick="(() => EditUser(user))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>You're not signed in as a user in @ADMINISTRATION_ROLE.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";

    ClaimsPrincipal CurrentUser;

    //Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();

    //Tracks the selected role for the currently selected user
    public string CurrentSelectedUser { get; set; } = "Users";

    // A collection to display the existing users
    List<IdentityUser> ColUsers = new List<IdentityUser>();

    //Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>(){"Users", "Administrators"};

    //To hold any possible errors
    string strError = string.Empty;

    //To enable showing the Popup
    bool ShowPopup = false;

    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
        var user = await _UserManager.FindByNameAsync("Admin@BlazorHelpWebsite.com");
        if (user != null)
        {
            // Is Admin@BlazorHelpWebsite.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        //Get the Users
        GetUsers();
    }

    void AddNewUser()
    {

    }

    async Task SaveUser()
    {

    }

    async Task EditUser(IdentityUser _IdentityUser)
    {

    }

    async Task DeletUser()
    {

    }

    void ClosePopup()
    {
        // Close the Popup

        ShowPopup = false;
    }

    public void GetUsers()
    {
        //Clear any error messages
        strError = String.Empty;

        //Collection to hold users
        ColUsers = new List<IdentityUser>();

        //Get users from _UserManager
        var user = _UserManager.Users.Select(x => new IdentityUser
            {
                Id = x.Id, 
                UserName = x.UserName, 
                Email = x.Email,
                PasswordHash = "*****"
            }
        );

        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }
}